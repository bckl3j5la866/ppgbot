# main.py - —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

from database import add_user, remove_user, get_user_count, add_documents, get_recent_documents, get_document_count
from parsers.simple_parser import SimpleParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def main():
    try:
        BOT_TOKEN = os.getenv("BOT_TOKEN")
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
        dp = Dispatcher()
        parser = SimpleParser()

        @dp.message(Command("start"))
        async def start_command(message: types.Message):
            user_id = message.from_user.id
            add_user(user_id)
            user_count = get_user_count()
            doc_count = get_document_count()
            
            await message.answer(
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤!</b>\n\n"
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {doc_count}\n\n"
                "‚ö° <b>–ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/docs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞"
            )

        @dp.message(Command("docs"))
        async def docs_command(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
            documents = get_recent_documents(5)
            if not documents:
                await message.answer("üì≠ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                return
            
            await message.answer(f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>")
            for doc in documents:
                text = (
                    f"<b>{doc.get('organization', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')}</b>\n"
                    f"üìÖ {doc.get('publishDate', '–î–∞—Ç–∞')}\n"
                    f"<i>{doc.get('documentTitle', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</i>\n"
                    f"<a href='{doc.get('url', '')}'>üìÑ –û—Ç–∫—Ä—ã—Ç—å</a>"
                )
                await message.answer(text)
                await asyncio.sleep(0.3)

        @dp.message(Command("update"))
        async def update_command(message: types.Message):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
            await message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            try:
                new_docs = parser.get_documents()
                if new_docs:
                    added_count = add_documents(new_docs)
                    if added_count > 0:
                        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
                    else:
                        await message.answer("‚úÖ –ù–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã")

        @dp.message(Command("stats"))
        async def stats_command(message: types.Message):
            user_count = get_user_count()
            doc_count = get_document_count()
            await message.answer(
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
                f"‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: bothost.ru"
            )

        @dp.message(Command("help"))
        async def help_command(message: types.Message):
            await message.answer(
                "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞:</b>\n\n"
                "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
                "/docs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" 
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
            )

        @dp.message(Command("unsubscribe"))
        async def unsubscribe_command(message: types.Message):
            user_id = message.from_user.id
            remove_user(user_id)
            await message.answer("üîî –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")

        @dp.message()
        async def echo(message: types.Message):
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é!")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())