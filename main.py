# main.py - —Å –Ω–æ–≤—ã–º WebParser
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ database.py
from database import (
    add_user, remove_user, get_user_count, 
    add_documents, get_recent_documents, get_document_count
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
from parsers.web_parser import get_parser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def main():
    try:
        BOT_TOKEN = os.getenv("BOT_TOKEN")
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
        dp = Dispatcher()
        parser = get_parser()

        @dp.message(Command("start"))
        async def start_command(message: types.Message):
            user_id = message.from_user.id
            add_user(user_id)
            user_count = get_user_count()
            doc_count = get_document_count()
            
            await message.answer(
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤!</b>\n\n"
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {doc_count}\n\n"
                "‚ö° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                "/docs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
            )

        @dp.message(Command("help"))
        async def help_command(message: types.Message):
            await message.answer(
                "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
                "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/docs - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n\n"
                "üîî <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
                "‚Ä¢ –ú–∏–Ω–ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–æ—Å—Å–∏–∏\n"
                "‚Ä¢ –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏ –Ø–∫—É—Ç–∏–∏\n"
                "‚Ä¢ –†–æ—Å–æ–±—Ä–Ω–∞–¥–∑–æ—Ä"
            )

        @dp.message(Command("stats"))
        async def stats_command(message: types.Message):
            user_count = get_user_count()
            doc_count = get_document_count()
            recent_docs = get_recent_documents(3)
            
            stats_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
                f"‚Ä¢ –ü–∞—Ä—Å–µ—Ä: WebParser\n\n"
            )
            
            if recent_docs:
                stats_text += "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
                for doc in recent_docs:
                    org_short = doc['organization'].split()[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
                    stats_text += f"‚Ä¢ {doc['publishDate']} - {org_short}\n"
            
            await message.answer(stats_text)

        @dp.message(Command("unsubscribe"))
        async def unsubscribe_command(message: types.Message):
            user_id = message.from_user.id
            remove_user(user_id)
            await message.answer(
                "üîî –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.\n"
                "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
            )

        @dp.message(Command("docs"))
        async def docs_command(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
            documents = get_recent_documents(5)
            if not documents:
                await message.answer(
                    "üì≠ <b>–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /update –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
                )
                return
            
            await message.answer(f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>")
            
            for i, doc in enumerate(documents, 1):
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                org_name = doc['organization']
                if len(org_name) > 40:
                    org_name = org_name[:40] + "..."
                
                text = (
                    f"<b>üìã –î–æ–∫—É–º–µ–Ω—Ç {i}</b>\n"
                    f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {org_name}\n"
                    f"<b>–î–∞—Ç–∞:</b> {doc.get('publishDate', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {doc.get('documentTitle', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    f"<a href='{doc.get('url', '')}'>üîó –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>"
                )
                await message.answer(text)
                await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        @dp.message(Command("update"))
        async def update_command(message: types.Message):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
            wait_msg = await message.answer(
                "üîÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...</b>\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.\n"
                "–ü–∞—Ä—Å–∏–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏..."
            )
            
            try:
                new_docs = parser.get_documents()
                if new_docs:
                    added_count = add_documents(new_docs)
                    if added_count > 0:
                        await wait_msg.edit_text(
                            f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ <b>{added_count}</b> –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
                            f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: <b>{get_document_count()}</b>\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /docs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                        )
                    else:
                        await wait_msg.edit_text(
                            "‚úÖ <b>–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã</b>\n\n"
                            "–ù–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                            f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ: <b>{get_document_count()}</b>"
                        )
                else:
                    await wait_msg.edit_text(
                        "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await wait_msg.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã</b>\n\n"
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        @dp.message()
        async def echo(message: types.Message):
            await message.answer(
                "‚ÑπÔ∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/docs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" 
                "/update - –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            )

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å WebParser...")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())