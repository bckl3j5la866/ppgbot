import json
import logging
import shutil
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_to_single_database():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—É—é –±–∞–∑—É –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    main_db_path = 'data/documents_database.json'
    old_db_path = 'data/documents.json'
    backup_path = f'data/documents_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    
    documents_from_old = []
    documents_from_main = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã
    try:
        with open(main_db_path, 'r', encoding='utf-8') as f:
            main_data = json.load(f)
            documents_from_main = main_data.get('documents', [])
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents_from_main)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã")
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
        main_data = {
            "documents": [],
            "last_update": "",
            "created_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã: {e}")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
    try:
        with open(old_db_path, 'r', encoding='utf-8') as f:
            old_data = json.load(f)
            # –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
            if isinstance(old_data, list):
                documents_from_old = old_data
            elif isinstance(old_data, dict) and 'documents' in old_data:
                documents_from_old = old_data.get('documents', [])
            else:
                documents_from_old = []
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents_from_old)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã")
    except FileNotFoundError:
        logger.info("‚ÑπÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
    if documents_from_old:
        try:
            shutil.copy2(old_db_path, backup_path)
            logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã: {backup_path}")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {e}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL)
    all_documents = documents_from_main
    existing_urls = {doc['url'] for doc in documents_from_main}
    
    added_count = 0
    for doc in documents_from_old:
        if doc.get('url') not in existing_urls:
            all_documents.append(doc)
            existing_urls.add(doc['url'])
            added_count += 1
    
    logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –±–∞–∑—É
    main_data['documents'] = all_documents
    main_data['last_update'] = datetime.now().isoformat()
    
    if not main_data.get('created_at'):
        main_data['created_at'] = datetime.now().isoformat()
    
    try:
        with open(main_db_path, 'w', encoding='utf-8') as f:
            json.dump(main_data, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –±–∞–∑–∞: {len(all_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã: {e}")
        return False
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        os.remove(old_db_path)
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª documents.json —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {e}")
    
    return True

if __name__ == "__main__":
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –µ–¥–∏–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    if migrate_to_single_database():
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        logger.error("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")