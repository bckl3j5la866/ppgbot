# –í–µ—Ä—Å–∏—è bot_core.py —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∫–∞–∑–∞ —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

from config import BOT_TOKEN, DOCUMENT_LIMIT
from parsers.open_data_parser import OpenDataParser

from performance_optimizations import (
    async_get_documents, async_get_document_count, async_search_documents,
    async_get_latest_documents, async_get_last_update_date, async_check_database_integrity,
    async_get_new_documents_quick, async_get_new_documents_full,
    shutdown_executor
)

from bot.users_storage import add_user, remove_user, load_users

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
parser = OpenDataParser(limit=DOCUMENT_LIMIT)


def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            ],
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É")
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
                KeyboardButton(text="üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
    )


def _parse_date_safe(date_str: str) -> datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY"""
    try:
        return datetime.strptime(date_str, "%d.%m.%Y")
    except (ValueError, TypeError):
        return datetime.min


async def get_newest_documents_per_organization():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã
        all_documents = await async_get_documents()
        
        if not all_documents:
            return []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        org_documents = {}
        for doc in all_documents:
            org = doc.get('organization', '')
            if org not in org_documents:
                org_documents[org] = []
            org_documents[org].append(doc)
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        newest_docs = []
        for org, docs in org_documents.items():
            if docs:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                docs.sort(key=lambda x: _parse_date_safe(x.get('publishDate', '01.01.1970')), reverse=True)
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                newest_docs.append(docs[0])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        newest_docs.sort(key=lambda x: _parse_date_safe(x.get('publishDate', '01.01.1970')), reverse=True)
        
        return newest_docs
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return []


@dp.message(Command(commands=["start", "help"]))
async def send_welcome(message: types.Message):
    users = load_users()
    user_str = str(message.from_user.id)
    is_new_user = user_str not in users

    total_count = await async_get_document_count()
    last_update = await async_get_last_update_date()

    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤!</b>\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä—ë—Ö –≤–µ–¥–æ–º—Å—Ç–≤:\n"
        "‚Ä¢ –ú–∏–Ω–ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏ –Ø–∫—É—Ç–∏–∏\n"
        "‚Ä¢ –†–æ—Å–æ–±—Ä–Ω–∞–¥–∑–æ—Ä\n\n"
        "üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_count}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update.strftime('%d.%m.%Y %H:%M') if last_update else '–Ω–∏–∫–æ–≥–¥–∞'}\n"
    )
    await message.answer(text)

    if is_new_user:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        newest_docs = await get_newest_documents_per_organization()
        
        if newest_docs:
            await message.answer("üìå <b>–°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –≤–µ–¥–æ–º—Å—Ç–≤—É:</b>")
            
            for doc in newest_docs:
                title = doc.get('documentTitle', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                if len(title) > 100:
                    title = title[:100] + "..."
                text_doc = (
                    f"<b>{doc.get('organization','')}</b>\n"
                    f"üìÖ {doc.get('publishDate','')}\n"
                    f"<i>{title}</i>\n"
                    f"<a href='{doc.get('url','')}'>üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>"
                )
                await message.answer(text_doc)
                await asyncio.sleep(0.2)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–µ–¥–æ–º—Å—Ç–≤
            orgs_count = len(set(doc.get('organization', '') for doc in newest_docs))
            await message.answer(f"üìã –ü–æ–∫–∞–∑–∞–Ω—ã —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç {orgs_count} –≤–µ–¥–æ–º—Å—Ç–≤")
        else:
            await message.answer("üì≠ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        add_user(message.from_user.id)

    await message.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())


@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
async def handle_search(message: types.Message):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–∏–∫–∞–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'):")


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    try:
        total_count = await async_get_document_count()
        last_update = await async_get_last_update_date()
        integrity = await async_check_database_integrity()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
        newest_docs = await get_newest_documents_per_organization()
        
        federal_count = len(await async_get_documents("–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏"))
        regional_count = len(await async_get_documents("–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)"))
        rosobrnadzor_count = len(await async_get_documents("–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –ø–æ –Ω–∞–¥–∑–æ—Ä—É –≤ —Å—Ñ–µ—Ä–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏"))
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—ã —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ–¥–æ–º—Å—Ç–≤–∞
        federal_latest_date = "–Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        regional_latest_date = "–Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" 
        rosobrnadzor_latest_date = "–Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        for doc in newest_docs:
            org = doc.get('organization', '')
            date = doc.get('publishDate', '')
            if "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏" in org:
                federal_latest_date = date
            elif "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –°–∞—Ö–∞" in org:
                regional_latest_date = date
            elif "–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –ø–æ –Ω–∞–¥–∑–æ—Ä—É" in org:
                rosobrnadzor_latest_date = date
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{total_count}</b>\n\n"
            f"<b>–ü–æ –≤–µ–¥–æ–º—Å—Ç–≤–∞–º:</b>\n"
            f"‚Ä¢ –ú–∏–Ω–ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–§: <b>{federal_count}</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {federal_latest_date})\n"
            f"‚Ä¢ –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏ –Ø–∫—É—Ç–∏–∏: <b>{regional_count}</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {regional_latest_date})\n"
            f"‚Ä¢ –†–æ—Å–æ–±—Ä–Ω–∞–¥–∑–æ—Ä: <b>{rosobrnadzor_count}</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {rosobrnadzor_latest_date})\n\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update.strftime('%d.%m.%Y %H:%M') if last_update else '–Ω–∏–∫–æ–≥–¥–∞'}\n"
            f"‚Ä¢ –ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {integrity.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )
        await message.answer(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")


@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É")
async def handle_update(message: types.Message):
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã...")
    try:
        new_docs = await async_get_new_documents_quick(parser)
        if new_docs:
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_docs)} –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", reply_markup=get_main_keyboard())
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            new_docs.sort(key=lambda x: _parse_date_safe(x.get('publishDate', '01.01.1970')), reverse=True)
            
            for doc in new_docs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
                title = doc.get('documentTitle', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                if len(title) > 100:
                    title = title[:100] + "..."
                text = (
                    f"<b>{doc.get('organization','')}</b>\n"
                    f"üìÖ {doc.get('publishDate','')}\n"
                    f"<i>{title}</i>\n"
                    f"<a href='{doc.get('url','')}'>üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>"
                )
                await message.answer(text)
                await asyncio.sleep(0.2)
                
            if len(new_docs) > 3:
                await message.answer(f"üìã –ò –µ—â–µ <b>{len(new_docs) - 3}</b> –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        else:
            await message.answer("‚úÖ –ù–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã")


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <b>üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b> - –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ <b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ <b>üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É</b> - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
        "üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
        "üìö <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        "‚Ä¢ –ú–∏–Ω–ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏ –Ø–∫—É—Ç–∏–∏\n" 
        "‚Ä¢ –†–æ—Å–æ–±—Ä–Ω–∞–¥–∑–æ—Ä"
    )
    await message.answer(text, reply_markup=get_main_keyboard())


@dp.message(F.text == "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π")
async def handle_subscription(message: types.Message):
    users = load_users()
    user_str = str(message.from_user.id)
    
    if user_str in users:
        text = (
            "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
            "–í—ã <b>–ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop"
        )
    else:
        text = (
            "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
            "–í—ã <b>–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b> –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
    await message.answer(text, reply_markup=get_main_keyboard())


@dp.message(Command("stop"))
async def handle_stop(message: types.Message):
    remove_user(message.from_user.id)
    await message.answer(
        "üîî –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(F.text & ~F.text.startswith('/'))
async def handle_search_query(message: types.Message):
    query = message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    if query in ["üîç –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                 "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"]:
        return
    
    if not query or len(query) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    await message.answer(f"üîç –ò—â—É –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{query}</b>")
    
    try:
        results = await async_search_documents(query, limit=10)
        if results:
            await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{len(results)}</b>")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            results.sort(key=lambda x: _parse_date_safe(x.get('publishDate', '01.01.1970')), reverse=True)
            
            for doc in results[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                title = doc.get('documentTitle', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                if len(title) > 100:
                    title = title[:100] + "..."
                text = (
                    f"<b>{doc.get('organization','')}</b>\n"
                    f"üìÖ {doc.get('publishDate','')}\n"
                    f"<i>{title}</i>\n"
                    f"<a href='{doc.get('url','')}'>üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>"
                )
                await message.answer(text)
                await asyncio.sleep(0.2)
            
            if len(results) > 5:
                await message.answer(f"üìã –ò –µ—â–µ <b>{len(results) - 5}</b> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
        else:
            await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–∫–∞–∑–æ–º —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)...")
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        await shutdown_executor()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")