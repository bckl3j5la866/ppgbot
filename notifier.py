import asyncio
import logging
from bot.bot_core import bot
from parsers.open_data_parser import OpenDataParser
from bot.users_storage import load_users
from database import add_documents
from config import CHECK_INTERVAL_SECONDS
from datetime import datetime

from performance_optimizations import (
    async_get_document_count, async_get_last_update_date,
    shutdown_executor, run_in_thread
)
from storage import mark_as_notified, filter_by_boundary, update_boundary

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

async def send_notifications():
    parser = OpenDataParser(limit=100)
    initial_count = await async_get_document_count()
    last_update = await async_get_last_update_date()
    logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã: {initial_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    while True:
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")

            all_federal = await async_get_all_documents(parser, "federal")
            all_regional = await async_get_all_documents(parser, "regional") 
            all_rosobrnadzor = await async_get_all_documents(parser, "rosobrnadzor")

            new_federal = filter_by_boundary("federal", all_federal)
            new_regional = filter_by_boundary("regional", all_regional)
            new_rosobrnadzor = filter_by_boundary("rosobrnadzor", all_rosobrnadzor)

            all_new_docs = new_federal + new_regional + new_rosobrnadzor

            if all_new_docs:
                added_docs = add_documents(all_new_docs)

                if added_docs:
                    users = load_users()
                    logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(added_docs)} –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                    for user_id in users:
                        try:
                            current_count = await async_get_document_count()
                            await bot.send_message(
                                user_id,
                                f"üì¢ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã!</b>\n\n"
                                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{len(added_docs)}</b> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
                                f"‚Ä¢ –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: <b>{current_count}</b>\n"
                                f"‚Ä¢ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%H:%M')}"
                            )
                            for doc in added_docs[:3]:
                                title = doc['documentTitle']
                                if len(title) > 100:
                                    title = title[:100] + "..."
                                text = (
                                    f"<b>{doc['organization']}</b>\n"
                                    f"üìÖ {doc['publishDate']}\n"
                                    f"<i>{title}</i>\n"
                                    f"<a href='{doc['url']}'>üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>"
                                )
                                await bot.send_message(user_id, text)
                                await asyncio.sleep(0.2)
                            if len(added_docs) > 3:
                                await bot.send_message(
                                    user_id,
                                    f"üìã –ò –µ—â–µ <b>{len(added_docs) - 3}</b> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
                                    f"–ù–∞–∂–º–∏—Ç–µ ¬´üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ."
                                )
                            await asyncio.sleep(1)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                    mark_as_notified("federal", new_federal)
                    mark_as_notified("regional", new_regional)
                    mark_as_notified("rosobrnadzor", new_rosobrnadzor)

                    update_boundary("federal", new_federal)
                    update_boundary("regional", new_regional)
                    update_boundary("rosobrnadzor", new_rosobrnadzor)

                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                logger.info("‚úÖ –ù–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {CHECK_INTERVAL_SECONDS} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            await asyncio.sleep(CHECK_INTERVAL_SECONDS)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            await asyncio.sleep(60)

@run_in_thread
def async_get_all_documents(parser_instance, source_key: str):
    dept_links = parser_instance.get_department_links()
    org_name = parser_instance.get_organization_name_by_key(source_key)
    if not org_name or org_name not in dept_links:
        return []
    url = dept_links[org_name]
    all_docs = parser_instance.parse_department_documents_with_pagination(url, org_name)
    return all_docs

async def start_notifier():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    try:
        await send_notifications()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–ª—É–∂–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await asyncio.sleep(60)
        await start_notifier()

async def shutdown_notifier():
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    await shutdown_executor()

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    try:
        asyncio.run(start_notifier())
    except KeyboardInterrupt:
        logger.info("üõë –°–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        asyncio.run(shutdown_notifier())
