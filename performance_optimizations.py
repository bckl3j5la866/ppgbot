# performance_optimizations.py
import asyncio
import functools
import concurrent.futures
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
io_executor = concurrent.futures.ThreadPoolExecutor(
    max_workers=5, 
    thread_name_prefix="bot_io"
)

def run_in_thread(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            io_executor, 
            functools.partial(func, *args, **kwargs)
        )
    return wrapper

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π database.py
@run_in_thread
def async_get_documents(organization: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_documents"""
    from database import get_documents
    return get_documents(organization)

@run_in_thread
def async_get_document_count():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_document_count"""
    from database import get_document_count
    return get_document_count()

@run_in_thread
def async_search_documents(query: str, limit: int = 10):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è search_documents"""
    from database import search_documents
    return search_documents(query, limit)

@run_in_thread
def async_get_latest_documents(organization: str = None, limit: int = 5):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_latest_documents"""
    from database import get_latest_documents
    return get_latest_documents(organization, limit)

@run_in_thread
def async_get_last_update_date():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_last_update_date"""
    from database import get_last_update_date
    return get_last_update_date()

@run_in_thread
def async_check_database_integrity():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è check_database_integrity"""
    from database import check_database_integrity
    return check_database_integrity()

# –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
@run_in_thread
def async_get_new_documents_smart(parser_instance):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_new_documents_smart"""
    return parser_instance.get_new_documents_smart()

@run_in_thread
def async_get_new_documents_quick(parser_instance):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_new_documents_quick"""
    return parser_instance.get_new_documents_quick()

@run_in_thread
def async_get_new_documents_full(parser_instance):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_new_documents_full"""
    return parser_instance.get_new_documents_full()

@run_in_thread
def async_get_new_documents_with_boundary(parser_instance, source_key: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_new_documents_with_boundary"""
    return parser_instance.get_new_documents_with_boundary(source_key)

async def shutdown_executor():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ performance_optimizations...")
    io_executor.shutdown(wait=True)
    logger.info("‚úÖ –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")