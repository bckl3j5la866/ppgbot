import requests
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import logging
import json
import os
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = ''  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù
BASE_URL = 'http://publication.pravo.gov.ru'

# URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
FEDERAL_URL = BASE_URL + '/documents/block/foiv262'
REGIONAL_URL = BASE_URL + '/search/region14/iogv?pageSize=30&index=1&SignatoryAuthorityId=39ec279e-970f-43c0-85b7-4aba57163bb7&&PublishDateSearchType=0&NumberSearchType=0&DocumentDateSearchType=0&JdRegSearchType=0&SortedBy=6&SortDestination=1'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DocumentBot:
    def __init__(self):
        self.seen_federal_file = 'seen_federal_documents.json'
        self.seen_regional_file = 'seen_regional_documents.json'
        self.seen_federal = self.load_seen_documents(self.seen_federal_file)
        self.seen_regional = self.load_seen_documents(self.seen_regional_file)
        self.current_state = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def load_seen_documents(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    return set(json.load(f))
            return set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ {filename}: {e}")
            return set()

    def save_seen_documents(self, doc_type):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if doc_type == 'federal':
                filename = self.seen_federal_file
                documents = self.seen_federal
            else:
                filename = self.seen_regional_file
                documents = self.seen_regional
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(list(documents), f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {doc_type}: {e}")

    def get_seen_documents(self, doc_type):
        """–ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É"""
        return self.seen_federal if doc_type == 'federal' else self.seen_regional

    def add_seen_document(self, doc_type, doc_number):
        """–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"""
        if doc_type == 'federal':
            self.seen_federal.add(doc_number)
        else:
            self.seen_regional.add(doc_number)
        self.save_seen_documents(doc_type)

    def create_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
        keyboard = [
            ["üìã –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "üèõÔ∏è –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def create_federal_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        keyboard = [
            ["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–§–µ–¥)", "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–§–µ–¥)"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def create_regional_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        keyboard = [
            ["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–†–µ–≥)", "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–†–µ–≥)"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def create_document_keyboard(self, document, doc_type):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", url=document['link'])],
            [InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å PDF", callback_data=f"download_{doc_type}_{document['number']}")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def create_back_keyboard(self, doc_type):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        type_name = "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ" if doc_type == 'federal' else "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ"
        keyboard = [
            [f"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑ ({type_name})", f"üìÑ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({type_name})"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def get_pdf_headers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF"""
        return {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/pdf,text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'identity',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }

    def download_pdf(self, pdf_url, document_number):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        try:
            headers = self.get_pdf_headers()
            response = requests.get(pdf_url, headers=headers, timeout=30, stream=True)
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
            content_type = response.headers.get('content-type', '')
            if 'pdf' in content_type or response.content[:4] == b'%PDF':
                pdf_content = response.content
                return pdf_content, f"{document_number}.pdf"
            else:
                logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ PDF —Ñ–∞–π–ª: {content_type}")
                return None, None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: {e}")
            return None, None

    def parse_documents(self, doc_type):
        """–ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å–∞–π—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        try:
            url = FEDERAL_URL if doc_type == 'federal' else REGIONAL_URL
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é {doc_type} –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...")
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            documents = []
            
            # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            document_blocks = soup.find_all('div', class_='documents-table-cell')
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {doc_type} –±–ª–æ–∫–æ–≤: {len(document_blocks)}")
            
            for block in document_blocks:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    number_elements = block.find_all('span', class_='info-data')
                    if not number_elements:
                        continue
                    
                    doc_number = number_elements[0].text.strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    name_element = block.find('a', class_='documents-item-name')
                    if not name_element:
                        continue
                    
                    doc_name = name_element.get_text(separator=' ', strip=True)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è
                    doc_date = number_elements[1].text.strip() if len(number_elements) > 1 else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                    doc_link = BASE_URL + name_element['href']
                    
                    pdf_element = block.find('a', title='–°–∫–∞—á–∞—Ç—å PDF —Ñ–∞–π–ª')
                    pdf_link = BASE_URL + pdf_element['href'] if pdf_element else ''
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    size_element = pdf_element.find('span', class_='documents-pdf-downloadlink') if pdf_element else None
                    file_size = size_element.text.strip() if size_element else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
                    seen_documents = self.get_seen_documents(doc_type)
                    is_new = doc_number not in seen_documents
                    
                    documents.append({
                        'number': doc_number,
                        'name': doc_name,
                        'date': doc_date,
                        'link': doc_link,
                        'pdf': pdf_link,
                        'size': file_size,
                        'is_new': is_new,
                        'type': doc_type
                    })
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
            
            return documents
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {doc_type} —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {doc_type}: {e}")
            return None

    def format_document_message(self, document, is_new=True):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        doc_type = "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π" if document['type'] == 'federal' else "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"
        status = "üÜï –ù–û–í–´–ô –î–û–ö–£–ú–ï–ù–¢" if is_new else "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        name = document['name']
        if len(name) > 200:
            name = name[:200] + "..."
        
        message = (
            f"{status} ({doc_type})\n"
            f"üìã {name}\n"
            f"üìÖ –î–∞—Ç–∞: {document['date']}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {document['number']}\n"
            f"üíæ –†–∞–∑–º–µ—Ä: {document['size']}"
        )
            
        return message

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å pravo.gov.ru\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"
        )
        keyboard = self.create_main_keyboard()
        await update.message.reply_text(welcome_text, reply_markup=keyboard)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìã –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
            "‚Ä¢ üìã **–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã** - –ø—Ä–∏–∫–∞–∑—ã –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤ –†–§\n"
            "‚Ä¢ üèõÔ∏è **–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã** - –ø—Ä–∏–∫–∞–∑—ã —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤ –≤–ª–∞—Å—Ç–∏\n"
            "‚Ä¢ üîç **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è** - –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ üìÑ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã** - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Å–∞–π—Ç–∞\n"
            "‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã —É–∂–µ –≤–∏–¥–µ–ª–∏."
        )
        keyboard = self.create_main_keyboard()
        await update.message.reply_text(help_text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)"""
        text = update.message.text
        user_id = update.message.from_user.id
        
        if text == "üìã –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã":
            await self.show_federal_menu(update, context)
        elif text == "üèõÔ∏è –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã":
            await self.show_regional_menu(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.show_main_menu(update, context)
        elif text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–§–µ–¥)":
            await self.check_federal_updates(update, context)
        elif text == "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–§–µ–¥)":
            await self.show_federal_documents(update, context)
        elif text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–†–µ–≥)":
            await self.check_regional_updates(update, context)
        elif text == "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–†–µ–≥)":
            await self.show_regional_documents(update, context)
        elif text.startswith("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑"):
            if "(–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ)" in text:
                await self.check_federal_updates(update, context)
            else:
                await self.check_regional_updates(update, context)
        elif text.startswith("üìÑ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
            if "(–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ)" in text:
                await self.show_federal_documents(update, context)
            else:
                await self.show_regional_documents(update, context)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=self.create_main_keyboard())

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        welcome_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"
        keyboard = self.create_main_keyboard()
        await update.message.reply_text(welcome_text, reply_markup=keyboard)

    async def show_federal_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        menu_text = "üìã –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = self.create_federal_keyboard()
        await update.message.reply_text(menu_text, reply_markup=keyboard)

    async def show_regional_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        menu_text = "üèõÔ∏è –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = self.create_regional_keyboard()
        await update.message.reply_text(menu_text, reply_markup=keyboard)

    async def check_federal_updates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        status_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        documents = self.parse_documents('federal')
        
        if documents is None:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            keyboard = self.create_back_keyboard('federal')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        if not documents:
            await status_msg.edit_text("üì≠ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            keyboard = self.create_back_keyboard('federal')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        new_documents = [doc for doc in documents if doc['is_new']]
        
        if not new_documents:
            await status_msg.edit_text("‚úÖ –ù–æ–≤—ã—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç")
            keyboard = self.create_back_keyboard('federal')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        await status_msg.edit_text(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(new_documents)} –Ω–æ–≤—ã—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        for doc in new_documents:
            try:
                message = self.format_document_message(doc, is_new=True)
                keyboard = self.create_document_keyboard(doc, 'federal')
                await update.message.reply_text(message, reply_markup=keyboard, disable_web_page_preview=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
                self.add_seen_document('federal', doc['number'])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = self.create_back_keyboard('federal')
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    async def check_regional_updates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        status_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        documents = self.parse_documents('regional')
        
        if documents is None:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            keyboard = self.create_back_keyboard('regional')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        if not documents:
            await status_msg.edit_text("üì≠ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            keyboard = self.create_back_keyboard('regional')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        new_documents = [doc for doc in documents if doc['is_new']]
        
        if not new_documents:
            await status_msg.edit_text("‚úÖ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç")
            keyboard = self.create_back_keyboard('regional')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        await status_msg.edit_text(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(new_documents)} –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        for doc in new_documents:
            try:
                message = self.format_document_message(doc, is_new=True)
                keyboard = self.create_document_keyboard(doc, 'regional')
                await update.message.reply_text(message, reply_markup=keyboard, disable_web_page_preview=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
                self.add_seen_document('regional', doc['number'])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = self.create_back_keyboard('regional')
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    async def show_federal_documents(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        status_msg = await update.message.reply_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        
        documents = self.parse_documents('federal')
        
        if documents is None:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            keyboard = self.create_back_keyboard('federal')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        if not documents:
            await status_msg.edit_text("üì≠ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            keyboard = self.create_back_keyboard('federal')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
        display_docs = documents[:5]
        
        await status_msg.edit_text(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(documents)} —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(display_docs)}:")
        
        for doc in display_docs:
            try:
                message = self.format_document_message(doc, is_new=doc['is_new'])
                keyboard = self.create_document_keyboard(doc, 'federal')
                await update.message.reply_text(message, reply_markup=keyboard, disable_web_page_preview=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = self.create_back_keyboard('federal')
        if len(documents) > 5:
            await update.message.reply_text(f"‚ÑπÔ∏è –ò –µ—â–µ {len(documents) - 5} —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    async def show_regional_documents(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        status_msg = await update.message.reply_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        
        documents = self.parse_documents('regional')
        
        if documents is None:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            keyboard = self.create_back_keyboard('regional')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        if not documents:
            await status_msg.edit_text("üì≠ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            keyboard = self.create_back_keyboard('regional')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
        display_docs = documents[:5]
        
        await status_msg.edit_text(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(documents)} —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(display_docs)}:")
        
        for doc in display_docs:
            try:
                message = self.format_document_message(doc, is_new=doc['is_new'])
                keyboard = self.create_document_keyboard(doc, 'regional')
                await update.message.reply_text(message, reply_markup=keyboard, disable_web_page_preview=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = self.create_back_keyboard('regional')
        if len(documents) > 5:
            await update.message.reply_text(f"‚ÑπÔ∏è –ò –µ—â–µ {len(documents) - 5} —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF
        if query.data.startswith("download_"):
            parts = query.data.split("_")
            if len(parts) >= 3:
                doc_type = parts[1]
                document_number = "_".join(parts[2:])
                await self.download_pdf_callback(update, context, doc_type, document_number)

    async def download_pdf_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, doc_type, document_number):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF"""
        query = update.callback_query
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        status_msg = await query.message.reply_text(f"üì• –°–∫–∞—á–∏–≤–∞—é PDF –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_number}...")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É
        documents = self.parse_documents(doc_type)
        if not documents:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return
        
        target_doc = None
        for doc in documents:
            if doc['number'] == document_number:
                target_doc = doc
                break
        
        if not target_doc or not target_doc['pdf']:
            await status_msg.edit_text("‚ùå PDF –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º PDF
        pdf_content, filename = self.download_pdf(target_doc['pdf'], document_number)
        
        if pdf_content and filename:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=pdf_content,
                    filename=filename,
                    caption=f"üìÑ {target_doc['name']}\nüî¢ –ù–æ–º–µ—Ä: {document_number}\nüèõÔ∏è –¢–∏–ø: {'–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π' if doc_type == 'federal' else '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π'}"
                )
                await status_msg.edit_text("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
                await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF")
        else:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å PDF")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("menu", self.show_main_menu))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        application.run_polling()

if __name__ == '__main__':
    bot = DocumentBot()

    bot.run()
